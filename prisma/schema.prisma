generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model characters {
  id              Int       @id @default(autoincrement())
  user_id         Int
  level           Int?
  name            String    @db.VarChar(255)
  role            String    @db.VarChar(255)
  race            String    @db.VarChar(255)
  max_hp          Int?
  current_hp      Int?
  strength        Int?
  dexterity       Int?
  constitution    Int?
  intelligence    Int?
  wisdom          Int?
  charisma        Int?
  armor           String[]  @db.VarChar
  equipped        String[]  @db.VarChar
  inventory       String[]  @db.VarChar
  languages       String[]  @db.VarChar
  spells          String[]  @db.VarChar
  tools           String[]  @db.VarChar
  weapons         String[]  @db.VarChar
  initiative      Int
  armor_class     Int
  vision          String?   @db.VarChar(255)
  acrobatics      Int?
  animal_handling Int?
  arcana          Int?
  athletics       Int?
  deception       Int?
  history         Int?
  insight         Int?
  intimidation    Int?
  investigation   Int?
  medicine        Int?
  nature          Int?
  perception      Int?
  performance     Int?
  persuasion      Int?
  religion        Int?
  sleight_of_hand Int?
  stealth         Int?
  survival        Int?
  alignment       String    @db.VarChar(255)
  appearance      String?
  background      String?
  img_url         String?   @db.VarChar(255)
  faith           String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  users           users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model scenarios {
  id             Int              @id @default(autoincrement())
  description    String
  img_url        String?          @db.VarChar(255)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  user_scenarios user_scenarios[]
}

model user_scenarios {
  id          Int       @id @default(autoincrement())
  user_id     Int
  scenario_id Int
  completed   Boolean?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  scenarios   scenarios @relation(fields: [scenario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              Int              @id @default(autoincrement())
  username        String           @unique @db.VarChar(40)
  email           String           @unique @db.VarChar(255)
  hashed_password String           @db.VarChar(255)
  profile_pic     String?          @db.VarChar(255)
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?        @default(now()) @db.Timestamptz(6)
  characters      characters[]
  user_scenarios  user_scenarios[]
}
