generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int             @id @default(autoincrement())
  username       String          @unique @db.VarChar(40)
  email          String          @unique @db.VarChar(255)
  hashedPassword String          @db.VarChar(255)
  profilePic     String?         @db.VarChar(255)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @db.Timestamptz(6)
  characters     Characters[]
  userScenarios  UserScenarios[]

  @@map("users")
}

model Characters {
  id             Int             @id @default(autoincrement())
  userId         Int             @map("userId")
  level          Int?
  name           String          @db.VarChar(255)
  role           String          @db.VarChar(255)
  specialty      String[]
  race           String          @db.VarChar(255)
  maxHp          Int?
  currentHp      Int?
  strength       Int?
  dexterity      Int?
  constitution   Int?
  intelligence   Int?
  wisdom         Int?
  charisma       Int?
  armor          String[]
  equipped       String[]
  inventory      String[]
  languages      String[]
  spells         String[]
  tools          String[]
  weapons        String[]
  initiative     Int
  armorClass     Int?
  vision         String?         @db.VarChar(255)
  acrobatics     Int?
  animalHandling Int?
  arcana         Int?
  athletics      Int?
  deception      Int?
  history        Int?
  insight        Int?
  intimidation   Int?
  investigation  Int?
  medicine       Int?
  nature         Int?
  perception     Int?
  performance    Int?
  persuasion     Int?
  religion       Int?
  sleightOfHand  Int?
  stealth        Int?
  survival       Int?
  alignment      String          @db.VarChar(255)
  appearance     String?
  background     String?
  imgUrl         String?         @db.VarChar(255)
  faith          String?         @db.VarChar(255)
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  users          Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userScenarios  UserScenarios[]

  @@map("characters")
}

model Scenarios {
  id            Int             @id @default(autoincrement())
  description   String
  imgUrl        String?         @db.VarChar(255)
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @default(now()) @db.Timestamptz(6)
  userScenarios UserScenarios[]

  @@map("scenarios")
}

model UserScenarios {
  id          Int        @id @default(autoincrement())
  userId      Int        @map("userId")
  scenarioId  Int        @map("scenarioId")
  characterId Int        @map("characterId")
  completed   Boolean?
  createdAt   DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?  @default(now()) @db.Timestamptz(6)
  users       Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenarios   Scenarios  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  characters  Characters @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@map("userScenarios")
}
